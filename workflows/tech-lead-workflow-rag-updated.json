[{
  "createdAt": "2025-08-15T18:20:28.864Z",
  "updatedAt": "2025-08-16T17:34:00.000Z",
  "id": "5cDsXFaw6mauadqk",
  "name": "42Gears AI Tech Lead Workflow",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "path": "freshdesk-mcp-trigger",
        "httpMethod": "POST",
        "options": {}
      },
      "id": "webhook-trigger-42agent",
      "name": "Freshdesk MCP Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.2,
      "position": [250, 300],
      "notes": "🚀 Trigger from Freshdesk MCP on ticket assignment.\nAccepts POST payload with ticket details."
    },
    {
      "parameters": {
        "jsCode": "const ticket = $json;\n// Skip logic: Only process high/medium priority, technical tickets\nconst skip = !['high', 'medium'].includes(ticket.priority?.toLowerCase()) || ticket.type?.toLowerCase() !== 'technical';\nreturn [{ skipAI: skip, ticket }];"
      },
      "id": "filter-ticket-priority",
      "name": "Smart Ticket Filter",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [500, 300],
      "notes": "⚡ Filters out simple/low-value tickets to save AI cost."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.skipAI }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-ai-needed",
      "name": "AI Processing Needed?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [750, 300],
      "notes": "🔀 Routes only complex tickets to AI nodes."
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8002/search",
        "authentication": "none",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"query\": \"{{ $json.ticket.subject }}\",\n  \"n_results\": 5,\n  \"collection_name\": \"42gears-kb-complete\"\n}",
        "options": {}
      },
      "id": "vector-search-node",
      "name": "RAG Vector Search",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1000, 300],
      "notes": "🔍 Searches our local ChromaDB vector database for relevant 42gears content."
    },
    {
      "parameters": {
        "jsCode": "const searchResults = $json;\nconst ticket = $items(\"AI Processing Needed?\", 0)?.[0]?.json?.ticket;\n\n// Extract relevant content from vector search results\nlet knowledge = '';\nif (searchResults.documents && searchResults.documents.length > 0) {\n  knowledge = searchResults.documents.map((doc, index) => {\n    const meta = searchResults.metadatas?.[index] || {};\n    return `### ${meta.title || 'Article'} (${meta.category || 'general'})\n${doc}\n\n`;\n  }).join('');\n}\n\nreturn [{\n  ticket,\n  knowledge: knowledge.trim() || 'No relevant knowledge found.'\n}];"
      },
      "id": "process-rag-results",
      "name": "Process RAG Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 300],
      "notes": "🧩 Formats vector search results into structured knowledge for AI."
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"model\": \"gpt-4o-mini\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a senior 42Gears technical architect with access to the complete 42Gears knowledge base. Analyze the support ticket using the provided knowledge and deliver:\\n\\n1. **Root Cause Analysis** - Technical diagnosis\\n2. **Step-by-Step Solution** - Clear implementation steps\\n3. **Preventive Measures** - How to avoid this issue\\n4. **Knowledge References** - Cite specific 42Gears articles used\\n\\nFormat your response professionally for internal team use.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"**Support Ticket:**\\n{{ $json.ticket.description }}\\n\\n**Relevant 42Gears Knowledge:**\\n{{ $json.knowledge }}\"\n    }\n  ],\n  \"temperature\": 0.3,\n  \"max_tokens\": 1200\n}",
        "options": {}
      },
      "id": "ai-tech-lead-analysis",
      "name": "AI Tech Lead Analysis",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1500, 300],
      "notes": "🤖 Generates tech-lead analysis using RAG-enhanced context."
    },
    {
      "parameters": {
        "url": "http://localhost:8000/api/tickets/{{ $json.ticket.id }}/notes",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"ticket_id\": \"{{ $json.ticket.id }}\",\n  \"note\": \"**AI Tech Lead Analysis (RAG-Enhanced)**\\n\\n{{ $json.choices[0].message.content }}\",\n  \"private\": true\n}",
        "options": {}
      },
      "id": "add-internal-note-mcp",
      "name": "Add Internal Note",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1750, 300],
      "notes": "📤 Sends RAG-enhanced AI analysis back to Freshdesk via MCP."
    }
  ],
  "connections": {
    "Freshdesk MCP Trigger": {
      "main": [
        [
          {
            "node": "Smart Ticket Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Smart Ticket Filter": {
      "main": [
        [
          {
            "node": "AI Processing Needed?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Processing Needed?": {
      "main": [
        [
          {
            "node": "RAG Vector Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RAG Vector Search": {
      "main": [
        [
          {
            "node": "Process RAG Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process RAG Results": {
      "main": [
        [
          {
            "node": "AI Tech Lead Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Tech Lead Analysis": {
      "main": [
        [
          {
            "node": "Add Internal Note",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": null,
  "triggerCount": 1,
  "tags": []
}]
