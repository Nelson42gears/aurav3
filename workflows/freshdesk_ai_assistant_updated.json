[
  {
    "name": "Freshdesk: AI First Draft Assistant (Updated)",
    "active": false,
    "nodes": [
      {
        "parameters": {
          "rule": {
            "interval": [
              {
                "field": "minutes",
                "minutesInterval": 5
              }
            ]
          }
        },
        "id": "schedule-trigger",
        "name": "Every 5 minutes",
        "type": "n8n-nodes-base.scheduleTrigger",
        "typeVersion": 1.2,
        "position": [240, 300]
      },
      {
        "parameters": {
          "method": "GET",
          "url": "https://42gears.freshdesk.com/api/v2/tickets",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "freshdeskApi",
          "sendQuery": true,
          "queryParameters": {
            "parameters": [
              {
                "name": "per_page",
                "value": "10"
              },
              {
                "name": "order_type", 
                "value": "desc"
              },
              {
                "name": "order_by",
                "value": "created_at"
              }
            ]
          },
          "options": {}
        },
        "id": "get-freshdesk-tickets",
        "name": "Get Freshdesk Tickets",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [460, 300]
      },
      {
        "parameters": {
          "values": {
            "string": [
              {
                "name": "ticket_id",
                "value": "={{ $json.id }}"
              },
              {
                "name": "ticket_subject", 
                "value": "={{ $json.subject }}"
              },
              {
                "name": "ticket_description",
                "value": "={{ $json.description_text || $json.description }}"
              },
              {
                "name": "requester_email",
                "value": "={{ $json.requester.email }}"
              },
              {
                "name": "created_at",
                "value": "={{ $json.created_at }}"
              }
            ]
          },
          "options": {}
        },
        "id": "extract-ticket-data",
        "name": "Extract Ticket Data",
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [680, 300]
      },
      {
        "parameters": {
          "jsCode": "// Filter tickets created in last 5 minutes\nconst now = new Date();\nconst fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000);\n\nconst tickets = $input.all();\nconst newTickets = [];\n\n// Process each ticket\nfor (const item of tickets) {\n  const createdAt = new Date(item.json.created_at);\n  \n  if (createdAt > fiveMinutesAgo) {\n    newTickets.push(item);\n  }\n}\n\nif (newTickets.length === 0) {\n  console.log('No new tickets found in the last 5 minutes');\n  return [];\n}\n\nconsole.log(`Found ${newTickets.length} new tickets`);\nreturn newTickets;"
        },
        "id": "filter-new-tickets",
        "name": "Filter New Tickets (Last 5 min)",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [900, 300]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://0drzjvpz3v4fzy-8000.proxy.runpod.net/v1/chat/completions",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "{\n  \"model\": \"qwen\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a professional support agent for 42Gears Mobility Systems. Write a helpful, concise response draft for this customer inquiry. Keep it under 200 words and be friendly but professional. Focus on providing actionable solutions.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Subject: {{ $json.ticket_subject }}\\n\\nCustomer Query: {{ $json.ticket_description }}\\n\\nCustomer Email: {{ $json.requester_email }}\"\n    }\n  ],\n  \"temperature\": 0.3,\n  \"max_tokens\": 300,\n  \"stop\": [\"\\n\\nThinking:\", \"<thinking>\", \"</thinking>\", \"\\n\\nLet me think\"]\n}",
          "options": {}
        },
        "id": "qwen-llm-request",
        "name": "Qwen3 LLM Request",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [1120, 300]
      },
      {
        "parameters": {
          "jsCode": "// Process and clean AI response\nconst response = $input.first().json;\nlet aiResponse = '';\n\nif (response && response.choices && response.choices[0] && response.choices[0].message) {\n  aiResponse = response.choices[0].message.content;\n  \n  // Clean up common AI artifacts\n  aiResponse = aiResponse\n    .replace(/^(Here's|Here is)\\s+/i, '')\n    .replace(/\\n\\n(Thinking|Let me think):[\\s\\S]*$/i, '')\n    .replace(/<thinking>[\\s\\S]*?<\\/thinking>/gi, '')\n    .trim();\n} else {\n  aiResponse = 'AI response processing failed. Please review this ticket manually.';\n}\n\nreturn [{\n  json: {\n    ticket_id: $('Extract Ticket Data').first().json.ticket_id,\n    subject: $('Extract Ticket Data').first().json.ticket_subject,\n    ai_response: aiResponse,\n    requester_email: $('Extract Ticket Data').first().json.requester_email\n  }\n}];"
        },
        "id": "process-ai-response",
        "name": "Process AI Response",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [1340, 300]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://42gears.freshdesk.com/api/v2/tickets/{{ $json.ticket_id }}/notes",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "freshdeskApi",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "{\n  \"body\": \"ðŸ¤– **AI Draft Response:**\\n\\n{{ $json.ai_response }}\\n\\n---\\n*This is an AI-generated draft response created by Qwen3 LLM. Please review and edit before sending to the customer.*\\n\\nCustomer: {{ $json.requester_email }}\\nSubject: {{ $json.subject }}\",\n  \"private\": true,\n  \"user_id\": 1\n}",
          "options": {}
        },
        "id": "post-ai-note",
        "name": "Post AI Draft Note",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [1560, 300]
      }
    ],
    "connections": {
      "Every 5 minutes": {
        "main": [
          [
            {
              "node": "Get Freshdesk Tickets",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Freshdesk Tickets": {
        "main": [
          [
            {
              "node": "Extract Ticket Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Ticket Data": {
        "main": [
          [
            {
              "node": "Filter New Tickets (Last 5 min)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Filter New Tickets (Last 5 min)": {
        "main": [
          [
            {
              "node": "Qwen3 LLM Request",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Qwen3 LLM Request": {
        "main": [
          [
            {
              "node": "Process AI Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Process AI Response": {
        "main": [
          [
            {
              "node": "Post AI Draft Note",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "pinData": {},
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "tags": [],
    "triggerCount": 1,
    "updatedAt": "2025-08-13T11:36:06.000Z",
    "versionId": "1"
  }
]
