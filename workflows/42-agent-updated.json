[{
  "name": "42Gears AI Tech Lead Workflow",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "path": "freshdesk-mcp-trigger",
        "httpMethod": "POST",
        "options": {}
      },
      "id": "webhook-trigger-42agent",
      "name": "Freshdesk MCP Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.2,
      "position": [250, 300],
      "notes": "ðŸš€ MCP webhook trigger for ticket assignment events"
    },
    {
      "parameters": {
        "jsCode": "const ticket = $json;\n// Smart filter: Only high/medium priority technical tickets\nconst skip = !['high', 'medium'].includes(ticket.priority?.toLowerCase()) || \n             ticket.type?.toLowerCase() !== 'technical' ||\n             ticket.group_id !== 17000117990; // Support_Group\nreturn [{ skipAI: skip, ticket }];"
      },
      "id": "filter-ticket-priority",
      "name": "Smart Ticket Filter",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [500, 300],
      "notes": "âš¡ Filter: high/medium + technical + Support_Group only"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.skipAI }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-ai-needed",
      "name": "AI Processing Route",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [750, 300],
      "notes": "ðŸ”€ Route only complex tickets to AI nodes"
    },
    {
      "parameters": {
        "url": "http://localhost:8000/api/tickets/search",
        "authentication": "none",
        "requestMethod": "GET",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.ticket.subject }} {{ $json.ticket.description_text }}"
            },
            {
              "name": "status",
              "value": "closed"
            },
            {
              "name": "limit",
              "value": "5"
            }
          ]
        },
        "options": {}
      },
      "id": "similar-tickets-search",
      "name": "Similar Tickets (MCP)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1000, 200],
      "notes": "ðŸ“‹ Search similar resolved tickets via MCP"
    },
    {
      "parameters": {
        "url": "https://knowledgebase.42gears.com/search",
        "authentication": "none",
        "requestMethod": "GET",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ $json.ticket.subject }}"
            },
            {
              "name": "limit",
              "value": "3"
            }
          ]
        },
        "options": {}
      },
      "id": "kb-search-node",
      "name": "Knowledge Base Search",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1000, 400],
      "notes": "ðŸ“š Search 42Gears knowledge base"
    },
    {
      "parameters": {
        "jsCode": "const similarTickets = $items('Similar Tickets (MCP)')[0]?.json || {};\nconst kbResults = $items('Knowledge Base Search')[0]?.json || {};\nconst ticket = $json.ticket;\n\n// Extract relevant context\nconst context = {\n  ticket,\n  similarTickets: Array.isArray(similarTickets.results) ? \n    similarTickets.results.slice(0, 3).map(t => `${t.subject}: ${t.description_text}`).join('\\n') : '',\n  knowledgeBase: Array.isArray(kbResults.articles) ? \n    kbResults.articles.slice(0, 3).map(a => `${a.title}: ${a.summary}`).join('\\n') : ''\n};\n\nreturn [context];"
      },
      "id": "merge-context-sources",
      "name": "Merge Context Sources",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 300],
      "notes": "ðŸ§© Combine similar tickets + KB articles"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "You are a senior 42Gears technical architect. Analyze support tickets and provide:\n1. Root cause analysis\n2. Step-by-step technical solution\n3. Preventive measures\n4. References to knowledge base articles\n\nBe concise, technical, and actionable. Focus on SureMDM, SureFox, and 42Gears products."
        }
      },
      "id": "ai-tools-agent",
      "name": "AI Tech Lead Agent",
      "type": "n8n-nodes-langchain.agent",
      "typeVersion": 1.4,
      "position": [1500, 300],
      "notes": "ðŸ¤– LangChain Tools Agent with tech lead persona"
    },
    {
      "parameters": {
        "url": "http://localhost:8000/api/tickets/{{ $json.ticket.id }}/notes",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"ticket_id\": \"{{ $json.ticket.id }}\",\n  \"note\": \"ðŸ¤– **AI Technical Analysis**\\n\\n{{ $json.output }}\",\n  \"private\": true\n}",
        "options": {}
      },
      "id": "add-internal-note-mcp",
      "name": "Add Internal Note (MCP)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1750, 300],
      "notes": "ðŸ“¤ Post AI analysis as internal note via MCP"
    }
  ],
  "connections": {
    "Freshdesk MCP Trigger": {
      "main": [
        [
          {
            "node": "Smart Ticket Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Smart Ticket Filter": {
      "main": [
        [
          {
            "node": "AI Processing Route",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Processing Route": {
      "main": [
        [
          {
            "node": "Similar Tickets (MCP)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Knowledge Base Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Similar Tickets (MCP)": {
      "main": [
        [
          {
            "node": "Merge Context Sources",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Knowledge Base Search": {
      "main": [
        [
          {
            "node": "Merge Context Sources",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Context Sources": {
      "main": [
        [
          {
            "node": "AI Tech Lead Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Tech Lead Agent": {
      "main": [
        [
          {
            "node": "Add Internal Note (MCP)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {}
}]
